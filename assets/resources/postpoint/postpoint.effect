// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        pos: { value: [0.5, 0.5] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  #define turnRight

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform sampler2D mixtexture;
  uniform POST{
    vec2 pos;
  };

  float getArea(vec2 a, vec2 b, vec2 c){
    // return x1y2-x1y3+x2y3-x2y1+x3y1-x2y2;
    // return 
    return abs(a.x * b.y - a.x * c.y + b.x * c.y - b.x * a.y + c.x * a.y - c.x * b.y) * 0.5;
  }
  void main () {
    // vec4 o = vec4(1, 1, 1, 1);

    // #if USE_TEXTURE
    // o *= texture(texture, v_uv0);
    //   #if CC_USE_ALPHA_ATLAS_TEXTURE
    //   o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    //   #endif
    // #endif

    // o *= v_color;

    // ALPHA_TEST(o);

    // pos.x = -pos.x;
    // x=(x1-x2)cosθ-(y1-y2)sinθ+x2
    // y=(y1-y2)cosθ+(x1-x2)sinθ+y2

    // vec2 postemp = pos;
    // vec2 uv = v_uv0;
    // uv.x = (uv.x - 0.5) * cos(3.14 / 4.) - (uv.y - 0.5) * sin(3.14 / 4.) + 0.5;
    // uv.y = (uv.y - 0.5) * cos(3.14 / 4.) + (uv.x - 0.5) * sin(3.14 / 4.) + 0.5;
    // postemp.x = -postemp.x;
    // gl_FragColor = texture(texture, v_uv0) 
    //   - vec4(0., 0., 0., texture(mixtexture, uv + postemp).a);


    vec2 postemp = pos;
    postemp.x += 0.3;

    //算圆部分
    vec4 o = texture2D(texture, v_uv0);
    float r = distance(v_uv0.xy, postemp);
    o.a *= smoothstep(0., 0.1, r);
    o.a *= smoothstep(0., 0.1, r);
    o.a *= smoothstep(0., 0.1, r);

    //算三角部分
    vec2 x1 = pos;
    vec2 x2 = postemp + vec2(0., 0.09);
    vec2 x3 = postemp - vec2(0., 0.09);;

    float temp = getArea(x1, x2, vec2(v_uv0.xy)) + getArea(x2, x3, vec2(v_uv0.xy)) 
      + getArea(x1, x3, vec2(v_uv0.xy));
    float s = getArea(x1, x2, x3);

    if(clamp(temp - s, 0.0, 1.0) < 0.002){
      // o += texture2D(texture, v_uv0);
      o.a *= smoothstep(0., 0.3, 0.3 - abs(v_uv0.x - postemp.x));
    }
    else{

    }


    // o.a *= clamp(r, 0., 1.);

    gl_FragColor = o;
  }
}%
