{
  "ver": "1.0.25",
  "uuid": "7bbd253e-108f-4841-8f4b-c29d027093f5",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D textureArea;\nuniform float time;\nfloat getArea(vec2 a, vec2 b, vec2 c){\n  return abs(a.x * b.y - a.x * c.y + b.x * c.y - b.x * a.y + c.x * a.y - c.x * b.y) * 0.5;\n}\nvoid main () {\n  float temp = getArea(vec2(0.4, 0.), vec2(0.6, 0.), vec2(v_uv0.xy)) + getArea(vec2(0.6, 0.), vec2(0.2, 1.0), vec2(v_uv0.xy))\n    + getArea(vec2(0.2, 1.0), vec2(0.8, 1.), vec2(v_uv0.xy)) + getArea(vec2(0.4, 0.), vec2(0.8, 1.), vec2(v_uv0.xy));\n  float s = (distance(vec2(0.4, 0.), vec2(0.6, 0.)) + distance(vec2(0.2, 1.0), vec2(0.8, 1.))) * 0.5;\n  vec4 t = texture2D(texture, v_uv0);\n  vec4 o = texture2D(texture, v_uv0 + mix(time, 0.15454, 0.04) * vec2(0.02, 0.06));\n  vec4 c = texture2D(textureArea, v_uv0);\n  float ratio = min(o.b, min(o.r, o.g));\n  if(ratio >= 0.99){\n    o.a = 0.0;\n  }\n  else{\n    o.r = o.r / ratio;\n    o.g = o.g / ratio;\n    o.b = o.b / ratio;\n    o.a = ratio;\n  }\n  o.a *= c.a;\n  float gradientBlend = clamp(v_uv0.y * 100.0, 3.0, 9.0);\n  float col1 = smoothstep(0.5, 1.0, v_uv0.y);\n  float col2 = smoothstep(0., 0.5, v_uv0.y);\n  gl_FragColor = (texture2D(texture, v_uv0 + time * vec2(0, 0.07)) * o)\n    * gradientBlend *\n      (vec4(0.150, 0.184, 0.084, 1.0) * col1 + vec4(0.25, 0.09, 0.0, 1.0) * col2);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D textureArea;\nuniform properties{\n  float time;\n};\nfloat getArea(vec2 a, vec2 b, vec2 c){\n  return abs(a.x * b.y - a.x * c.y + b.x * c.y - b.x * a.y + c.x * a.y - c.x * b.y) * 0.5;\n}\nvoid main () {\n  float temp = getArea(vec2(0.4, 0.), vec2(0.6, 0.), vec2(v_uv0.xy)) + getArea(vec2(0.6, 0.), vec2(0.2, 1.0), vec2(v_uv0.xy))\n    + getArea(vec2(0.2, 1.0), vec2(0.8, 1.), vec2(v_uv0.xy)) + getArea(vec2(0.4, 0.), vec2(0.8, 1.), vec2(v_uv0.xy));\n  float s = (distance(vec2(0.4, 0.), vec2(0.6, 0.)) + distance(vec2(0.2, 1.0), vec2(0.8, 1.))) * 0.5;\n  vec4 t = texture2D(texture, v_uv0);\n  vec4 o = texture2D(texture, v_uv0 + mix(time, 0.15454, 0.04) * vec2(0.02, 0.06));\n  vec4 c = texture2D(textureArea, v_uv0);\n  float ratio = min(o.b, min(o.r, o.g));\n  if(ratio >= 0.99){\n    o.a = 0.0;\n  }\n  else{\n    o.r = o.r / ratio;\n    o.g = o.g / ratio;\n    o.b = o.b / ratio;\n    o.a = ratio;\n  }\n  o.a *= c.a;\n  float gradientBlend = clamp(v_uv0.y * 100.0, 3.0, 9.0);\n  float col1 = smoothstep(0.5, 1.0, v_uv0.y);\n  float col2 = smoothstep(0., 0.5, v_uv0.y);\n  gl_FragColor = (texture2D(texture, v_uv0 + time * vec2(0, 0.07)) * o)\n    * gradientBlend *\n      (vec4(0.150, 0.184, 0.084, 1.0) * col1 + vec4(0.25, 0.09, 0.0, 1.0) * col2);\n}"
      }
    }
  ],
  "subMetas": {}
}