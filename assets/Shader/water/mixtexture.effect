// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        postion: { value: [0, 0] }
        time: { value: 0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    // pos.y += 0.5;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  // uniform sampler2D inTexture;
  // uniform vec2 postion;
  uniform properties {
    vec2 postion;
    float time;
  };

  void main () {
    // vec4 o = vec4(1, 1, 1, 1);

    // #if USE_TEXTURE
    // o *= texture(texture, v_uv0);
    //   #if CC_USE_ALPHA_ATLAS_TEXTURE
    //   o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    //   #endif
    // #endif

    // o *= v_color;

    // ALPHA_TEST(o);
    // vec4 o = texture(texture, v_uv0) + texture(texture, v_uv0);
    // vec2 v_uvmy = v_uv0;
    // v_uvmy *= cos(time);

    // vec2 v_uvmy = normalize(vec2(0.5, 0.5) -v_uv0) * abs(sin(time)) + v_uv0;
    // vec4 o = texture(texture, v_uvmy);
    // // o.a = 0.5;

    // gl_FragColor = o;

    vec2 distance_vec = postion - v_uv0;
    distance_vec = distance_vec * vec2(480.0 / 240.0, 1.0);
    float distance = sqrt(distance_vec.x * distance_vec.x + distance_vec.y * distance_vec.y);

    // distance小于1，但是我们希望能有多个波峰波谷，所以在sin的内部乘上一个比较大的倍数
    // sin函数的值在-1到1之间，我们希望偏移值很小，所以输出的时候需要缩小一定的倍数倍
    float sin_factor = sin(distance * 60.0 + time * -30.0) * 0.06;
    float discard_factor = clamp(0.2 - abs(time * 0.8 - distance), 0.0, 1.0);

    // 计算总的uv的偏移值
    vec2 offset = normalize(distance_vec) * sin_factor * discard_factor;
    vec2 uv = offset + v_uv0;

    gl_FragColor = texture2D(texture, uv);
    
    //gl_FragColor = texture(texture, v_uv0 + normalize(vec2(0.5, 0.5) - v_uv0) * clamp(abs(sin(time)), 0.0, 1.0) * 0.06);
  }
}%
