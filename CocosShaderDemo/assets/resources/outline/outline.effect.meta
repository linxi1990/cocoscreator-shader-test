{
  "ver": "1.0.23",
  "uuid": "43d9e681-43b2-4e19-889b-cce63ba40542",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nvoid main () {\n\n  vec4 o = texture2D(texture, v_uv0);\n  float a = 0.;\n  if(o.a > 0.2){\n    gl_FragColor = v_color * o;\n  }\n  else{\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(30.0), 0.0125 * sin(30.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(60.), 0.0125 * sin(60.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(90.), 0.0125 * sin(90.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(120.), 0.0125 * sin(120.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(150.), 0.0125 * sin(150.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(180.), 0.0125 * sin(180.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(210.), 0.0125 * sin(210.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(240.), 0.0125 * sin(240.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(270.), 0.0125 * sin(270.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(300.), 0.0125 * sin(300.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(330.), 0.0125 * sin(330.))).a;\n    a += texture2D(texture, v_uv0 + vec2(0.0125 * cos(360.), 0.0125 * sin(360.))).a;\n    if(a > 0.6){\n      gl_FragColor = v_color * (o + vec4(0., 1., 0., 1.));\n    }\n    else{\n      gl_FragColor = v_color * o;\n    }\n  }\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nvoid main () {\n\n  vec4 o = texture(texture, v_uv0);\n  float a = 0.;\n  if(o.a > 0.2){\n    gl_FragColor = v_color * o;\n  }\n  else{\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(30.0), 0.0125 * sin(30.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(60.), 0.0125 * sin(60.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(90.), 0.0125 * sin(90.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(120.), 0.0125 * sin(120.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(150.), 0.0125 * sin(150.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(180.), 0.0125 * sin(180.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(210.), 0.0125 * sin(210.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(240.), 0.0125 * sin(240.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(270.), 0.0125 * sin(270.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(300.), 0.0125 * sin(300.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(330.), 0.0125 * sin(330.))).a;\n    a += texture(texture, v_uv0 + vec2(0.0125 * cos(360.), 0.0125 * sin(360.))).a;\n    if(a > 0.6){\n      gl_FragColor = v_color * (o + vec4(0., 1., 0., 1.));\n    }\n    else{\n      gl_FragColor = v_color * o;\n    }\n  }\n}\n"
      }
    }
  ],
  "subMetas": {}
}