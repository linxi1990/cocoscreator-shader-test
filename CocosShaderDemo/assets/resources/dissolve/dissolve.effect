// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        time: { value: 0. }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #define pos vec2(0.5, 0.5)
  #define disEffect 0.037
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform sampler2D nosisetexture;
  uniform sampler2D u_lut;
  uniform properties{
    float time;
  }

  void main () {
    // vec4 o = vec4(1, 1, 1, 1);

    // #if USE_TEXTURE
    // o *= texture(texture, v_uv0);
    //   #if CC_USE_ALPHA_ATLAS_TEXTURE
    //   o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    //   #endif
    // #endif

    // o *= v_color;

    // ALPHA_TEST(o);

    // gl_FragColor = o;
    float dis = distance(pos, v_uv0);
    vec4 noiseColor = texture2D(nosisetexture, v_uv0); 
    float cutout = noiseColor.r * dis * (1.0 - disEffect) + dis * disEffect;
    // float threshold = abs(1.0 - time * 0.09);
    float threshold = abs(time * 0.025);
    if (cutout < threshold) {
      discard;
    }
    float degree = clamp((cutout - threshold) / 0.1, 0.0, 1.0);
    vec4 edgeColor = texture2D(u_lut, vec2(degree, degree)); 

    vec4 fragColor = texture2D(texture, v_uv0); 
    // gl_FragColor = lerp(edgeColor, fragColor, vec4(degree));
    vec4 finalColor = edgeColor + degree * (fragColor - edgeColor);
    // vec3 finalColor = lerp(edgeColor.rgb, fragColor.rgb, degree);
    gl_FragColor = fragColor * edgeColor;
  }
}%
