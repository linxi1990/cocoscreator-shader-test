{
  "ver": "1.0.25",
  "uuid": "75ef3723-b7af-4c65-b562-fddbfac537aa",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D nosisetexture;\nuniform sampler2D u_lut;\nuniform float time;\nvoid main () {\n  float dis = distance(vec2(0.5, 0.5), v_uv0);\n  vec4 noiseColor = texture2D(nosisetexture, v_uv0);\n  float cutout = noiseColor.r * dis * (1.0 - 0.037) + dis * 0.037;\n  float threshold = abs(time * 0.025);\n  if (cutout < threshold) {\n    discard;\n  }\n  float degree = clamp((cutout - threshold) / 0.1, 0.0, 1.0);\n  vec4 edgeColor = texture2D(u_lut, vec2(degree, degree));\n  vec4 fragColor = texture2D(texture, v_uv0);\n  vec4 finalColor = edgeColor + degree * (fragColor - edgeColor);\n  gl_FragColor = fragColor * edgeColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D nosisetexture;\nuniform sampler2D u_lut;\nuniform properties{\n  float time;\n};\nvoid main () {\n  float dis = distance(vec2(0.5, 0.5), v_uv0);\n  vec4 noiseColor = texture2D(nosisetexture, v_uv0);\n  float cutout = noiseColor.r * dis * (1.0 - 0.037) + dis * 0.037;\n  float threshold = abs(time * 0.025);\n  if (cutout < threshold) {\n    discard;\n  }\n  float degree = clamp((cutout - threshold) / 0.1, 0.0, 1.0);\n  vec4 edgeColor = texture2D(u_lut, vec2(degree, degree));\n  vec4 fragColor = texture2D(texture, v_uv0);\n  vec4 finalColor = edgeColor + degree * (fragColor - edgeColor);\n  gl_FragColor = fragColor * edgeColor;\n}"
      }
    }
  ],
  "subMetas": {}
}