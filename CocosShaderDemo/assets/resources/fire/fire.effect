// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        time: { value: 0.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  #define x1 vec2(0.4, 0.)
  #define x2 vec2(0.6, 0.)
  #define x3 vec2(0.2, 1.0)
  #define x4 vec2(0.8, 1.)

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform properties{
    float time;
  }

  float getArea(vec2 a, vec2 b, vec2 c){
    // return x1y2-x1y3+x2y3-x2y1+x3y1-x2y2;
    // return 
    return abs(a.x * b.y - a.x * c.y + b.x * c.y - b.x * a.y + c.x * a.y - c.x * b.y) * 0.5;
  }

  void main () {
    float temp = getArea(x1, x2, vec2(v_uv0.xy)) + getArea(x2, x3, vec2(v_uv0.xy)) 
      + getArea(x3, x4, vec2(v_uv0.xy)) + getArea(x1, x4, vec2(v_uv0.xy));
    float s = (distance(x1, x2) + distance(x3, x4)) * 0.5;
    if(clamp(temp - s, 0.0, 1.0) > 0.8){
      vec4 o = texture2D(texture, v_uv0);
      o.a = 0.;
      gl_FragColor = o;
    }
    else{
      // vec4 o = texture2D(texture, v_uv0 + mix(time, 0.15454, 0.04) * vec2(0.01, 0.02));
      // float gradientBlend = 1.0 - v_uv0.y;

      // gl_FragColor = (texture2D(texture, v_uv0 + time * vec2(0, 0.06)) + o)
      //   * gradientBlend * gradientBlend  + vec4(1., 0., 0., 0.8);

      vec4 t = texture2D(texture, v_uv0);
      vec4 o = texture2D(texture, v_uv0 + mix(time, 0.15454, 0.04) * vec2(0.1, 0.08));
      // float gradientBlend = v_uv0.y * 5.0;
      float gradientBlend = clamp(v_uv0.y * 10.0, 2.0, 9.0);
      float col1 = smoothstep(0.5, 1.0, v_uv0.y);
      float col2 = smoothstep(0., 0.5, v_uv0.y);

      gl_FragColor = (texture2D(texture, v_uv0 + time * vec2(0, 0.06)) + o)
        * gradientBlend * 
          (vec4(0.150, 0.184, 0.084, 1.0) * col1 + vec4(0.25, 0.09, 0.0, 1.0) * col2);
    }
    // vec4 t = texture2D(texture, v_uv0);
    // vec4 o = texture2D(texture, v_uv0 + mix(time, 0.15454, 0.04) * vec2(0.01, 0.02));
    // // float gradientBlend = v_uv0.y * 5.0;
    // float gradientBlend = clamp(v_uv0.y * 10.0, 2.0, 9.0);
    // float col1 = smoothstep(0.5, 1.0, v_uv0.y);
    // float col2 = smoothstep(0., 0.5, v_uv0.y);

    // gl_FragColor = (texture2D(texture, v_uv0 + time * vec2(0, 0.06)) + o)
    //   * gradientBlend * 
    //     (vec4(0.150, 0.184, 0.084, 1.0) * col1 + vec4(0.25, 0.09, 0.0, 1.0) * col2);
  }
}%
