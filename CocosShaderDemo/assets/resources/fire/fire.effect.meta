{
  "ver": "1.0.23",
  "uuid": "7bbd253e-108f-4841-8f4b-c29d027093f5",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float time;\nfloat getArea(vec2 a, vec2 b, vec2 c){\n\n  return abs(a.x * b.y - a.x * c.y + b.x * c.y - b.x * a.y + c.x * a.y - c.x * b.y) * 0.5;\n}\n\nvoid main () {\n  float temp = getArea(vec2(0.4, 0.), vec2(0.6, 0.), vec2(v_uv0.xy)) + getArea(vec2(0.6, 0.), vec2(0.2, 1.0), vec2(v_uv0.xy)) \n    + getArea(vec2(0.2, 1.0), vec2(0.8, 1.), vec2(v_uv0.xy)) + getArea(vec2(0.4, 0.), vec2(0.8, 1.), vec2(v_uv0.xy));\n  float s = (distance(vec2(0.4, 0.), vec2(0.6, 0.)) + distance(vec2(0.2, 1.0), vec2(0.8, 1.))) * 0.5;\n  if(clamp(temp - s, 0.0, 1.0) > 0.8){\n    vec4 o = texture2D(texture, v_uv0);\n    o.a = 0.;\n    gl_FragColor = o;\n  }\n  else{\n\n    vec4 t = texture2D(texture, v_uv0);\n    vec4 o = texture2D(texture, v_uv0 + mix(time, 0.15454, 0.04) * vec2(0.1, 0.08));\n\n    float gradientBlend = clamp(v_uv0.y * 10.0, 2.0, 9.0);\n    float col1 = smoothstep(0.5, 1.0, v_uv0.y);\n    float col2 = smoothstep(0., 0.5, v_uv0.y);\n\n    gl_FragColor = (texture2D(texture, v_uv0 + time * vec2(0, 0.06)) + o)\n      * gradientBlend * \n        (vec4(0.150, 0.184, 0.084, 1.0) * col1 + vec4(0.25, 0.09, 0.0, 1.0) * col2);\n  }\n\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform properties{\n  float time;\n}\n\nfloat getArea(vec2 a, vec2 b, vec2 c){\n\n  return abs(a.x * b.y - a.x * c.y + b.x * c.y - b.x * a.y + c.x * a.y - c.x * b.y) * 0.5;\n}\n\nvoid main () {\n  float temp = getArea(vec2(0.4, 0.), vec2(0.6, 0.), vec2(v_uv0.xy)) + getArea(vec2(0.6, 0.), vec2(0.2, 1.0), vec2(v_uv0.xy)) \n    + getArea(vec2(0.2, 1.0), vec2(0.8, 1.), vec2(v_uv0.xy)) + getArea(vec2(0.4, 0.), vec2(0.8, 1.), vec2(v_uv0.xy));\n  float s = (distance(vec2(0.4, 0.), vec2(0.6, 0.)) + distance(vec2(0.2, 1.0), vec2(0.8, 1.))) * 0.5;\n  if(clamp(temp - s, 0.0, 1.0) > 0.8){\n    vec4 o = texture2D(texture, v_uv0);\n    o.a = 0.;\n    gl_FragColor = o;\n  }\n  else{\n\n    vec4 t = texture2D(texture, v_uv0);\n    vec4 o = texture2D(texture, v_uv0 + mix(time, 0.15454, 0.04) * vec2(0.1, 0.08));\n\n    float gradientBlend = clamp(v_uv0.y * 10.0, 2.0, 9.0);\n    float col1 = smoothstep(0.5, 1.0, v_uv0.y);\n    float col2 = smoothstep(0., 0.5, v_uv0.y);\n\n    gl_FragColor = (texture2D(texture, v_uv0 + time * vec2(0, 0.06)) + o)\n      * gradientBlend * \n        (vec4(0.150, 0.184, 0.084, 1.0) * col1 + vec4(0.25, 0.09, 0.0, 1.0) * col2);\n  }\n\n}\n"
      }
    }
  ],
  "subMetas": {}
}