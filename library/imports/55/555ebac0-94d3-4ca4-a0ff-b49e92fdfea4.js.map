{"version":3,"sources":["assets\\Example\\IA\\CustomIAAssembler.ts"],"names":[],"mappings":";;;;;AACA,IAAM,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC;AACjC,IAAM,cAAc,GAAG,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC;AAElD;IAA+C,qCAAY;IAA3D;QAAA,qEAmCC;QAlCG,aAAO,GAAG,IAAI,CAAC;QACf,SAAG,GAAG,IAAI,CAAC;QACX,WAAK,GAAG,IAAI,CAAC;;IAgCjB,CAAC;IA9BG,gCAAI,GAAJ,UAAM,IAAI;QACN,iBAAM,IAAI,YAAC,IAAI,CAAC,CAAC;QAEjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAEhB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,WAAW,CAAC;IACjD,CAAC;IAED,qCAAS,GAAT;QACI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,0CAA0C;YAC1C,IAAI,CAAC,OAAO,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAE/D,IAAI,CAAC,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;YAChC,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;YAC1C,IAAI,CAAC,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;YACzC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;SACvB;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,uCAAW,GAAX,UAAa,IAAI,EAAE,QAAQ;QACvB,IAAI,CAAC,IAAI,CAAC,GAAG;YAAE,OAAO;QAEtB,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC5C,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IACL,wBAAC;AAAD,CAnCA,AAmCC,CAnC8C,EAAE,CAAC,SAAS,GAmC1D","file":"","sourceRoot":"/","sourcesContent":["\nconst MeshBuffer = cc.MeshBuffer;\nconst InputAssembler = cc.renderer.InputAssembler;\n\nexport default class CustomIAAssembler extends cc.Assembler {\n    _buffer = null;\n    _ia = null;\n    _vfmt = null;\n\n    init (comp) {\n        super.init(comp);\n        \n        this._buffer = null;\n        this._ia = null;\n\n        this._vfmt = cc.gfx.VertexFormat.XY_UV_Color;\n    }\n\n    getBuffer () {\n        if (!this._buffer) {\n            // Create quad buffer for vertex and index\n            this._buffer = new MeshBuffer(cc.renderer._handle, this._vfmt);\n\n            this._ia = new InputAssembler();\n            this._ia._vertexBuffer = this._buffer._vb;\n            this._ia._indexBuffer = this._buffer._ib;\n            this._ia._start = 0;\n            this._ia._count = 0;\n        }\n        return this._buffer;\n    }\n    \n    fillBuffers (comp, renderer) {\n        if (!this._ia) return;\n        \n        renderer.node = comp.node;\n        renderer.material = comp.sharedMaterials[0];\n        renderer._flushIA(this._ia);\n    }\n}\n"]}