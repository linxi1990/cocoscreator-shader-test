[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"postpoint",[{"hash":620670306,"record":null,"name":"postpoint|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D mixtexture;\nuniform POST{\n  vec2 pos;\n};\nfloat getArea(vec2 a, vec2 b, vec2 c){\n  return abs(a.x * b.y - a.x * c.y + b.x * c.y - b.x * a.y + c.x * a.y - c.x * b.y) * 0.5;\n}\nvoid main () {\n  vec2 postemp = pos;\n  postemp.x += 0.3;\n  vec4 o = texture2D(texture, v_uv0);\n  float r = distance(v_uv0.xy, postemp);\n  o.a *= smoothstep(0., 0.1, r);\n  o.a *= smoothstep(0., 0.1, r);\n  o.a *= smoothstep(0., 0.1, r);\n  vec2 x1 = pos;\n  vec2 x2 = postemp + vec2(0., 0.09);\n  vec2 x3 = postemp - vec2(0., 0.09);;\n  float temp = getArea(x1, x2, vec2(v_uv0.xy)) + getArea(x2, x3, vec2(v_uv0.xy))\n    + getArea(x1, x3, vec2(v_uv0.xy));\n  float s = getArea(x1, x2, x3);\n  if(clamp(temp - s, 0.0, 1.0) < 0.002){\n    o.a *= smoothstep(0., 0.3, 0.3 - abs(v_uv0.x - postemp.x));\n  }\n  else{\n  }\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform sampler2D mixtexture;\nuniform vec2 pos;\nfloat getArea(vec2 a, vec2 b, vec2 c){\n  return abs(a.x * b.y - a.x * c.y + b.x * c.y - b.x * a.y + c.x * a.y - c.x * b.y) * 0.5;\n}\nvoid main () {\n  vec2 postemp = pos;\n  postemp.x += 0.3;\n  vec4 o = texture2D(texture, v_uv0);\n  float r = distance(v_uv0.xy, postemp);\n  o.a *= smoothstep(0., 0.1, r);\n  o.a *= smoothstep(0., 0.1, r);\n  o.a *= smoothstep(0., 0.1, r);\n  vec2 x1 = pos;\n  vec2 x2 = postemp + vec2(0., 0.09);\n  vec2 x3 = postemp - vec2(0., 0.09);;\n  float temp = getArea(x1, x2, vec2(v_uv0.xy)) + getArea(x2, x3, vec2(v_uv0.xy))\n    + getArea(x1, x3, vec2(v_uv0.xy));\n  float s = getArea(x1, x2, x3);\n  if(clamp(temp - s, 0.0, 1.0) < 0.002){\n    o.a *= smoothstep(0., 0.3, 0.3 - abs(v_uv0.x - postemp.x));\n  }\n  else{\n  }\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"POST","binding":1,"members":[{"name":"pos","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]},{"name":"mixtexture","type":29,"count":1,"binding":31,"defines":[]}]}],[{"passes":[{"program":"postpoint|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"pos":{"type":14,"value":[0.5,0.5]}}}]}]]],0,0,[],[],[]]