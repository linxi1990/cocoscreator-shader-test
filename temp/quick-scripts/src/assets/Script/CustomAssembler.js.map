{"version":3,"sources":["assets\\Script\\CustomAssembler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export default class CustomAssembler extends cc.Assembler {\n    verticesCount = 4;\n    indicesCount = 6;\n    uvOffset = 2;\n    colorOffset = 4;\n    floatsPerVert = 5;\n\n    _renderData = null;\n    _local = null;\n\n    init (comp) {\n        super.init(comp);\n        this._renderData = new cc.RenderData();\n        this._renderData.init(this);\n\n        this.initLocal();\n        this.initData();\n    }\n\n    //override\n    updateRenderData (comp) {\n        if (comp._vertsDirty) {\n            this.updateUVs(comp);\n            this.updateVerts(comp);\n            comp._vertsDirty = false;\n        }\n    }\n\n    updateUVs (comp) {\n        let uv = [0, 0, 1, 0, 0, 1, 1, 1];\n        let uvOffset = this.uvOffset;\n        let floatsPerVert = this.floatsPerVert;\n        let verts = this._renderData.vDatas[0];\n        for (let i = 0; i < 4; i++) {\n            let srcOffset = i * 2;\n            let dstOffset = floatsPerVert * i + uvOffset;\n            verts[dstOffset] = uv[srcOffset];\n            verts[dstOffset + 1] = uv[srcOffset + 1];\n        }\n    }\n\n    updateVerts (comp) {\n        let node = comp.node,\n            cw = node.width, ch = node.height,\n            appx = node.anchorX * cw, appy = node.anchorY * ch,\n            l, b, r, t;\n\n        l = - appx;\n        b = - appy;\n        r = cw - appx;\n        t = ch - appy;\n\n        let local = this._local;\n        local[0] = l;\n        local[1] = b;\n        local[2] = r;\n        local[3] = t;\n        this.updateWorldVerts(comp);\n    }\n\n    get verticesFloats () {\n        return this.verticesCount * this.floatsPerVert;\n    }\n\n    initData () {\n        let data = this._renderData;\n        data.createQuadData(0, this.verticesFloats, this.indicesCount);\n    }\n\n    initLocal () {\n        this._local = [];\n        this._local.length = 4;\n    }\n\n    updateColor (comp, color) {\n        let uintVerts = this._renderData.uintVDatas[0];\n        if (!uintVerts) return;\n        color = color ||comp.node.color._val;\n        let floatsPerVert = this.floatsPerVert;\n        let colorOffset = this.colorOffset;\n        // let mycolor:cc.Color = new cc.Color(255,0,0,255); \n        for (let i = colorOffset, l = uintVerts.length; i < l; i += floatsPerVert) {\n            uintVerts[i] = color;\n        }\n    }\n\n    getBuffer () {\n        return cc.renderer._handle._meshBuffer;\n    }\n\n    updateWorldVerts (comp) {\n        let local = this._local;\n        let verts = this._renderData.vDatas[0];\n\n        let matrix = comp.node._worldMatrix;\n        let matrixm = matrix.m,\n            a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5],\n            tx = matrixm[12], ty = matrixm[13];\n\n        let vl = local[0], vr = local[2],\n            vb = local[1], vt = local[3];\n        \n        let justTranslate = a === 1 && b === 0 && c === 0 && d === 1;\n\n        if (justTranslate) {\n            // left bottom\n            verts[0] = vl + tx;\n            verts[1] = vb + ty;\n            // right bottom\n            verts[5] = vr + tx;\n            verts[6] = vb + ty;\n            // left top\n            verts[10] = vl + tx;\n            verts[11] = vt + ty;\n            // right top\n            verts[15] = vr + tx;\n            verts[16] = vt + ty;\n        } else {\n            let al = a * vl, ar = a * vr,\n            bl = b * vl, br = b * vr,\n            cb = c * vb, ct = c * vt,\n            db = d * vb, dt = d * vt;\n\n            // left bottom\n            verts[0] = al + cb + tx;\n            verts[1] = bl + db + ty;\n            // right bottom\n            verts[5] = ar + cb + tx;\n            verts[6] = br + db + ty;\n            // left top\n            verts[10] = al + ct + tx;\n            verts[11] = bl + dt + ty;\n            // right top\n            verts[15] = ar + ct + tx;\n            verts[16] = br + dt + ty;\n        }\n    }\n\n    fillBuffers (comp, renderer) {\n        if (renderer.worldMatDirty) {\n            this.updateWorldVerts(comp);\n        }\n\n        let renderData = this._renderData;\n        let vData = renderData.vDatas[0];\n        let iData = renderData.iDatas[0];\n\n        let buffer = this.getBuffer();\n        let offsetInfo = buffer.request(this.verticesCount, this.indicesCount);\n\n        // buffer data may be realloc, need get reference after request.\n\n        // fill vertices\n        let vertexOffset = offsetInfo.byteOffset >> 2,\n            vbuf = buffer._vData;\n\n        if (vData.length + vertexOffset > vbuf.length) {\n            vbuf.set(vData.subarray(0, this.verticesFloats), vertexOffset);\n        }\n        else {\n            vbuf.set(vData, vertexOffset);\n        }\n\n        // fill indices\n        let ibuf = buffer._iData,\n            indiceOffset = offsetInfo.indiceOffset,\n            vertexId = offsetInfo.vertexOffset;\n        for (let i = 0, l = iData.length; i < l; i++) {\n            ibuf[indiceOffset++] = vertexId + iData[i];\n        }\n    }\n}\n"]}