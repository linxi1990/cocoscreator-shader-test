{"version":3,"sources":["assets\\resources\\myassembler.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 支持原生端自定义渲染\r\n */\r\nconst gfx = cc.gfx;\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nlet vfmtPosUvColor = new gfx.VertexFormat([\r\n    { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\r\n    { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\r\n    { name: gfx.ATTR_COLOR, type: gfx.ATTR_TYPE_UINT8, num: 4, normalize: true },\r\n]);\r\n\r\ninterface BookVertex {\r\n    x:number,\r\n    y:number,\r\n    u:number,\r\n    v:number\r\n}\r\n\r\ninterface BookQuad {\r\n    lt:number,\r\n    lb:number,\r\n    rb:number,\r\n    rt:number\r\n}\r\n\r\n@ccclass\r\nexport default class myassembler extends cc.Assembler {\r\n    protected verts:BookVertex[] = []\r\n    protected quads:BookQuad[] = []\r\n    private verticesCount:number = 4;\r\n    private indicesCount:number = 6;\r\n    private floatsPerVert:number = 5;\r\n    protected renderData: cc.RenderData = null;\r\n\r\n    public init(comp: cc.RenderComponent) {\r\n        super.init(comp);\r\n\r\n        //@ts-ignore\r\n        let segmentCount = comp.getVertNum() - 1;\r\n        this.verticesCount = 4 * segmentCount;\r\n        this.indicesCount = 6 * segmentCount;\r\n        // this.floatsPerVert = 6;\r\n        \r\n        this.initData();\r\n    }\r\n\r\n    public initData() {\r\n        //@ts-ignore\r\n        this.renderData = new cc.RenderData();\r\n        this.renderData.init(this);\r\n\r\n        let data = this.renderData;\r\n        // createFlexData支持创建指定格式的renderData\r\n        data.createFlexData(0, this.verticesCount, this.indicesCount, vfmtPosUvColor);\r\n\r\n        // 顶点数固定的情况下索引不变化\r\n        let indices = data.iDatas[0];\r\n        let count = indices.length / 6;\r\n        for (let i = 0, idx = 0; i < count; i++) {\r\n            let vertextID = i * 4;\r\n            indices[idx++] = vertextID;\r\n            indices[idx++] = vertextID+1;\r\n            indices[idx++] = vertextID+2;\r\n            indices[idx++] = vertextID+1;\r\n            indices[idx++] = vertextID+3;\r\n            indices[idx++] = vertextID+2;\r\n        }\r\n    }\r\n\r\n    public updateRenderData(comp: any){\r\n        if(comp){\r\n            let pointNum: number = comp.getVertNum();\r\n            let spaceCnt = pointNum - 1;\r\n            this.verts.length = 0;\r\n            this.quads.length = 0;\r\n\r\n            let node = comp.node;\r\n            let height = node.height;\r\n            let width = node.width;\r\n\r\n            // 上一个点的纹理坐标\r\n            let lastU = 0;\r\n            // 下一个点的纹理坐标\r\n            let nextU = 0;\r\n            \r\n            //坐标\r\n            let spaceX = width / spaceCnt;\r\n            let spaceUv = 1 / spaceCnt;\r\n            // 左下角的坐标\r\n            let posX = - width * node.anchorX;\r\n            let posY = - height * node.anchorY;\r\n            if(!cc.sys.isNative){\r\n                let worldPos = comp.node.convertToWorldSpaceAR(cc.v2(posX, posY));\r\n                posX = worldPos.x;\r\n                posY = worldPos.y;\r\n            }\r\n            for(let i = 1; i < pointNum; i ++){\r\n                nextU = lastU + spaceUv;\r\n                let lb = this.verts.push({x: posX + (i - 1) * spaceX, y: posY, u: lastU, v: 1 });\r\n                let rb = this.verts.push({x: posX + i * spaceX, y: posY, u: nextU, v: 1 });\r\n                let lt = this.verts.push({x: posX + (i - 1) * spaceX , y: posY + height, u: lastU, v: 0 });\r\n                let rt = this.verts.push({x: posX + i * spaceX, y: posY + height, u: nextU, v: 0 });\r\n\r\n                this.quads.push({\r\n                    lb: lb - 1,\r\n                    rb: rb - 1,\r\n                    lt: lt - 1,\r\n                    rt : rt - 1,\r\n                })\r\n                lastU = nextU;\r\n            }\r\n            if(cc.sys.isNative){\r\n                let white = comp.node.color._val;\r\n                let vertexOffset = 0;\r\n                // 填充顶点缓冲\r\n                let vbuf = this.renderData.vDatas[0];\r\n                for (let i = 0, len = this.verts.length; i < len; i++) {\r\n                    let vert = this.verts[i]\r\n                    vbuf[vertexOffset++] = vert.x;\r\n                    vbuf[vertexOffset++] = vert.y;\r\n                    vbuf[vertexOffset++] = vert.u;\r\n                    vbuf[vertexOffset++] = vert.v;\r\n                    vbuf[vertexOffset++] = white;\r\n                    // vertexOffset++;\r\n                    // vbuf[vertexOffset++] = isFront;\r\n                }\r\n            }\r\n            // let white = cc.Color.RED._val \r\n \r\n        }\r\n    }\r\n\r\n    public fillBuffers(comp:cc.RenderComponent, renderer:cc.renderer){\r\n        if (this.verts.length == 0) {\r\n            return\r\n        }\r\n        let buffer = renderer.getBuffer('mesh', vfmtPosUvColor)\r\n\r\n        let verts = this.verts\r\n        let vertexCount = verts.length\r\n        let indiceCount = this.quads.length * 6\r\n        // 通过设定的顶点数量及顶点索引数量获取 buffer 的数据空间\r\n        let offsetInfo = buffer.request(vertexCount, indiceCount);\r\n\r\n        let vbuf = buffer._vData //positon/uv\r\n        let ibuf = buffer._iData //index \r\n        let uintbuf = buffer._uintVData // colors\r\n\r\n        let vertexOffset = offsetInfo.byteOffset >> 2\r\n        let indiceOffset = offsetInfo.indiceOffset\r\n        let vertexId = offsetInfo.vertexOffset\r\n        let white = cc.Color.WHITE._val\r\n        // 填充顶点缓冲\r\n        for (let i = 0, len = verts.length; i < len; i++) {\r\n            let vert = verts[i]\r\n            // let isFirstVert = i % 2 === 0\r\n            // let firstVert = isFirstVert ? vert : verts[i - 1]\r\n            // let secondVert = isFirstVert ? verts[i + 1] : vert\r\n            // // 计算当前小矩形是正面还是背面\r\n            // let isFront = firstVert.x < secondVert.x ? 1.0 : 0.0\r\n            vbuf[vertexOffset++] = vert.x;\r\n            vbuf[vertexOffset++] = vert.y;\r\n            vbuf[vertexOffset++] = vert.u;\r\n            vbuf[vertexOffset++] = vert.v;\r\n            uintbuf[vertexOffset++] = white;\r\n            // vbuf[vertexOffset++] = isFront;\r\n        }\r\n        // 填充索引缓冲\r\n        for (let i = 0, len = this.quads.length; i < len; i++) {\r\n            let quad = this.quads[i]\r\n            ibuf[indiceOffset++] = vertexId + quad.lb\r\n            ibuf[indiceOffset++] = vertexId + quad.rb\r\n            ibuf[indiceOffset++] = vertexId + quad.lt\r\n\r\n            ibuf[indiceOffset++] = vertexId + quad.rb\r\n            ibuf[indiceOffset++] = vertexId + quad.rt\r\n            ibuf[indiceOffset++] = vertexId + quad.lt\r\n        }\r\n    }\r\n}\r\n"]}